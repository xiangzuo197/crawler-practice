信息的标记
标记后的信息可形成信息组织结构，增加信息的维度
标记后的信息可用于通信、存储或展示
标记的结构与信息一样具有重要价值
标记后的信息更利于程序理解和运用

HTML的信息标记

HTML是WWW（word Wide web）的信息组织方式
声音，图像，视频 
|______________|
     超文本
 HTML通过预定义的<>...</>标签形式组织不同类型的信息
 
信息标记的三种形式
XML,JSON,YAML

XML extensible Markup Language
<img src="china.jpg" size="10">...</img>
img:名称
属性:Attribute
标签Tag
<img src="china.jpg" size="10"/> #空元素的缩写形式（标签没有内容）
<!--This is a comment,very useful --> #注释书写形式

XML是基于HTML的通用的表达形式
<name>...</name>
<name/>
<!--  -->
XML通过标签形式来构建信息
当标签有内容时，用一对标签来表达信息
没有内容，用一对尖括号表达


JSON javaScript Object Notation

有类型的键值对key:value构成的框架形式
"key":"value"
"key":["value1","value2"]
"key":{“subkey:"subvalue"”}

YAML YAML AIN'T MARKUP LANGUAGE
无类型键值对key:value
- 表达并列关系
| 表达整块数据
# 表示注释

key:value
key:#Comment
-value1
-value2
key:
  subkey:subvalue
  
三种信息标记形式的比较
XML最早的通用信息标记语言，可扩展性好，但繁琐
JSON信息有类型，适合程序处理(js),较XML简洁
YAML信息无类型，文本信息比例最高，可读性好

XML internet上的信息交互与传递
JSON 移动应用云端和节点的信息通信，无注释
YAML 各类系统的配置文件，有注释易读


信息提取的一般方法
方法一：完整解析信息的标记形式，再提取关键信息
XML JSON YAML
需要标记解析器 例如：bs4库的标签树遍历
优点:信息解析准确
缺点：提取过程繁琐，速度慢

方法二:无视标记形式，直接搜索关键信息
搜索
对信息的文本查找函数即可
优点:提取过程简介，速度较快
缺点：提取结果准确性与信息内容相关

融合方法
融合方法：结合形式解析与搜索方法，提取关键信息
XML JSON YAML 搜索
需要标记解析器及文本查找函数

实例
提取HTML中所有URL链接
思路:1)搜索到所有<a>标签
     2）解析<a>标签格式，提取href后的链接内容
from bs4 import BeautifulSoup
soup = BeautifulSoup(demo,"html.parser")
for link in soup.find_all('a'):
    print(link.get('href'))
>>>
http://www.icourse163.org/course/BIT-268001
http://www.icourse163.org/course/BIT-1001870001


基于bs4库的HTML的提取方法
<>.find_all(name,attrs,recursive,string,**kwargs)
返回一个列表类型，存储查找的结果
name:对标签名称的检索字符串
attrs:对标签属性值的检索字符串，可标注属性检索
recursive:是否对子孙全部检索，默认True
string:<>...</>中字符串区域的检索字符串



>>> soup.find_all("a")
[<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a>, <a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>]
>>> soup.find_all(['a','b'])
[<b>The demo python introduces several python courses.</b>, <a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a>, <a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>]

for tag in soup.find_all(True):
	print(tag.name)

	
html
head
title
body
p
b
p
a
a

>>> import re
>>> for tag in soup.find_all(re.compile('b')):
	print(tag.name)

	
body
b

>>> soup.find_all('p','course')
[<p class="course">Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:

<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a> and <a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>.</p>]

>>> soup.find_all(id='link1')
[<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a>]

>>> soup.find_all(id='link')
[]
#需要用到正则表达式
>>> import re
>>> soup.find_all(id=re.compile('link'))
[<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a>, <a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>]

>>> soup.find_all('a',recursive=False)
[]

>>> soup.find_all(string = "Basic Python")
['Basic Python']
>>> import re
>>> soup.find_all(string=re.compile("python"))
['This is a python demo page', 'The demo python introduces several python courses.']
 
 简写形式
 <tag>(..)等价于<tag>.find_all(..)
 soup(..)等价于soup.find_all(..)
 
 
<>.find() #搜索且只返回一个结果，字符串类型，同.find_all()参数
<>.find_parents() #在先辈节点中搜索，返回列表类型，同.find_all()参数
<>.find_parent()  #在先辈节点中返回一个结果，字符串类型，同.find_all()参数
<>.find_next_siblings() #在后续平行节点中搜索，返回列表类型，同.find_all()参数
<>.find_next_sibling() #在后续平行节点中返回一个结果，字符串类型，同.find()参数
<>.find_previous_siblings() #在前续平行节点中搜索，返回列表类型，同.find_all()参数
<>.find_previous_sibling() #在前序平行节点中返回一个结果，字符串类型，同.find()参数
 
