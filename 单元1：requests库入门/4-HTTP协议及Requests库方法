"""
Requests库的7个主要方法

requests.request()  #构造一个请求，支撑以下个方法的基础方法
requests.get（）    #获取HTML网页的主要方法，对应于HTTP的
requests.head()     #获取HTML网页头信息的方法，对应于HTTP的HEAD
requests.post()     #向HTML网页提交POST请求的方法，对应于HTTP的POST
requests.put()      #向HTML网页提交PUT请求的方法，对应于HTTP的PUT
requests.patch()    #向HTML网页提交局部修改请求，对应于HTTP的PATCH
requests.delete()   #向HTML网页提交删除请求，对应于HTTP的DELETE



HTTP协议
HTTP，Hypertext Transfer Protocol,超文本传输协议
HTTP是一个基于“请求与响应”模式的、无状态的应用层协议。
HTTP协议采用URL作为定位网络资源的标识

URL格式 http://host[:port][path]

host：合法的Internet主机域名或IP地址
port：端口号，缺省端口为80（默认值）
path：请求资源的路径

HTTP URL实例：
http：//www.bit.edu.cn
http://220.181.111.188/duty
HTTP URL的理解：
URL是通过HTTP协议存取资源的Internet路径，一个URL对应一个数据资源

HTTP协议对资源的操作
GET     #请求获取URL位置的资源
HEAD    #请求获取URL位置的响应消息报告，即获得该资源的头部消息
POST    #请求向URL位置的资源后附加新得数据
PUT     #请求向URL位置存储一个资源，覆盖原URL位置得资源
PATCH   #请求局部更新URL位置得资源，即改变该处资源的部分内容
DELET   #请求删除URL位置的存储资源

"""

重点理解PATCH和PUT的区别
假设URL位置有一组数据UserInfo，包括UserID、UserName等20个字段。


需求：用户修改了UserName，其他不变。
*采用PATCH，仅向URL提交UserName的局部更新请求
*采用PUT，必须将所有20个字段一并提交到URL，未提交字段被删除
PATCH的最主要好处：节省网络带宽

HTTP协议与Requests库功能一致性

Requests库的head()方法

>>> r = requests.head('http://httpbin.org/get')
>>> r.headers
{'Connection': 'close', 'Cache-Control': 'max-age:86400', 'Date': 'Saturday, 11-Apr-20 21:36:35 CST', 'Expires': 'Sun, 12 Apr 2020 21:36:35 GMT', 'Keep-Alive': 'timeout=58', 'Location': 'https://httpbin.org/get', 'Content-Length': '0'}
>>>r.text
>>> r.text
''


































